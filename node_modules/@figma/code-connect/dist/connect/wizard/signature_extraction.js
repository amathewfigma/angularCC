"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSignature = void 0;
const typescript_1 = __importDefault(require("typescript"));
const parser_1 = require("../../react/parser");
function extractSignature({ nameToFind, sourceFilePath, projectInfo, }) {
    const { tsProgram } = projectInfo;
    const checker = tsProgram.getTypeChecker();
    // Get source file
    const sourceFile = tsProgram.getSourceFile(sourceFilePath);
    if (!sourceFile) {
        throw new Error(`Could not find source for file: ${sourceFilePath}`);
    }
    for (const statement of sourceFile.statements) {
        if (!(typescript_1.default.isFunctionDeclaration(statement) || typescript_1.default.isVariableStatement(statement))) {
            continue;
        }
        if (!statement.modifiers?.some((modifier) => modifier.kind === typescript_1.default.SyntaxKind.ExportKeyword)) {
            continue;
        }
        const name = typescript_1.default.isFunctionDeclaration(statement)
            ? statement.name?.text
            : statement.declarationList.declarations?.[0].name.getText(sourceFile);
        if (name === nameToFind ||
            (nameToFind === 'default' &&
                statement.modifiers.some((modifier) => modifier.kind === typescript_1.default.SyntaxKind.DefaultKeyword))) {
            const symbol = typescript_1.default.isFunctionDeclaration(statement)
                ? statement.name && checker.getSymbolAtLocation(statement.name)
                : checker.getSymbolAtLocation(statement.declarationList.declarations[0].name);
            if (!symbol) {
                throw new Error(`Could not find symbol for ${name}`);
            }
            const signature = (0, parser_1.extractComponentTypeSignature)(symbol, checker, sourceFile);
            if (!signature) {
                throw new Error(`Could not find signature for ${name}`);
            }
            return signature;
        }
    }
    throw new Error('No function or variable signatures found');
}
exports.extractSignature = extractSignature;
//# sourceMappingURL=signature_extraction.js.map