import { ReactProjectInfo } from '../project';
import { ComponentTypeSignature } from '../../react/parser';
import { FigmaRestApi } from '../figma_rest_api';
import { PropMapping } from '../parser_executable_types';
import { BaseCommand } from '../../commands/connect';
import { ValueMapping } from '../../connect/intrinsics';
/**
 * Used when we should output a placeholder for an unknown value in prop mapping.
 */
export declare const PROPERTY_PLACEHOLDER = "PROPERTY_PLACEHOLDER";
export declare function generateValueMapping(propSignature: string, figmaPropDef: FigmaRestApi.ComponentPropertyDefinition): ValueMapping;
export declare enum MatchableNameTypes {
    Property = 0,
    VariantValue = 1
}
type MatchableName = {
    type: MatchableNameTypes;
    name: string;
    variantProperty?: string;
};
/**
 * Builds a map of all properties and enum values, indexed by matchable name.
 * @param componentPropertyDefinitions
 * @returns A map of {name: values[]}. Each value is an array to avoid
 * collisions between properties / enum values
 */
export declare function buildMatchableNamesMap(componentPropertyDefinitions?: FigmaRestApi.Component['componentPropertyDefinitions']): Record<string, MatchableName[]>;
export declare function generatePropMapping({ componentPropertyDefinitions, signature, }: {
    componentPropertyDefinitions: FigmaRestApi.Component['componentPropertyDefinitions'];
    signature: ComponentTypeSignature;
}): PropMapping;
export declare function extractSignatureAndGeneratePropMapping({ exportName, filepath, projectInfo, componentPropertyDefinitions, cmd, }: {
    exportName: string;
    filepath: string;
    projectInfo: ReactProjectInfo;
    componentPropertyDefinitions: FigmaRestApi.Component['componentPropertyDefinitions'];
    cmd: BaseCommand;
}): {
    propMapping: PropMapping | undefined;
    signature: ComponentTypeSignature | undefined;
};
export {};
//# sourceMappingURL=prop_mapping.d.ts.map