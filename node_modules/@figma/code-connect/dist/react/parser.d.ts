import ts from 'typescript';
import { PropMappings } from '../connect/intrinsics';
import { CodeConnectJSON } from '../connect/figma_connect';
import { ParserContext, ParseOptions } from '../connect/parser_common';
export declare function findAndResolveImports(program: ts.Program, sourceFile: ts.SourceFile): Record<string, string>;
export type ComponentTypeSignature = Record<string, string>;
/**
 * Extracts the type signature from the interface of a React component as a map of
 * keys to strings representing the type of that property. Appends a '?' to the value
 * if it's optional. Example:
 * {
 *  name: string
 *  disabled: ?boolean
 * }
 * @param symbol the symbol of the function declaration of the component (in the source file)
 * @param sourceFile the source file with the component definition
 * @param checker
 * @returns
 */
export declare function extractComponentTypeSignature(symbol: ts.Symbol, checker: ts.TypeChecker, sourceFile: ts.SourceFile): ComponentTypeSignature;
/**
 * Extract metadata about the referenced React component. Used by both the
 * Code Connect and Storybook commands.
 *
 * @param parserContext Parser context
 * @param componentSymbol The ts.Symbol from the metadata referencing the
 * component being documented
 * @param node The node being parsed. Used for error logging.
 * @returns Metadata object
 */
export declare function parseComponentMetadata(node: ts.PropertyAccessExpression | ts.Identifier | ts.Expression, parserContext: ParserContext, silent?: boolean): Promise<{
    source: string;
    line: number;
    component: string;
}>;
/**
 * Parses the render function passed to `figma.connect()`, extracting the code and
 * any import statements matching the JSX elements used in the function body
 *
 * @param exp A function or arrow function expression
 * @param parserContext Parser context
 * @param propMappings Prop mappings object as returned by parseProps
 *
 * @returns The code of the render function and a list of imports
 */
export declare function parseRenderFunction(exp: ts.ArrowFunction | ts.FunctionExpression | ts.FunctionDeclaration, parserContext: ParserContext, propMappings?: PropMappings): {
    code: string;
    imports: {
        statement: string;
        file: string;
    }[];
    nestable: boolean;
};
export declare function replacePropPlaceholders(exampleCode: string): string;
export declare function getDefaultTemplate(componentMetadata: Awaited<ReturnType<typeof parseComponentMetadata>>): string;
export declare function parseReactDoc(node: ts.CallExpression, parserContext: ParserContext, { repoUrl, silent }: ParseOptions): Promise<CodeConnectJSON>;
//# sourceMappingURL=parser.d.ts.map